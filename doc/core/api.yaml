swagger: "2.0"
info:
  description: "This specification documents the public API of easy:core.
  Services with the 'student' tag require a token containing claim 'easy_role: student'.
  Services with the 'teacher' tag require a token containing claim 'easy_role: teacher' or 'easy_role: admin'.
  Services with the 'admin' tag require a token containing claim 'easy_role: admin'.
  'Common' services can be called by all roles."
  version: "2.0"
  title: Easy:core Public API
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
basePath: /v2

tags:
  - name: student
  - name: teacher
  - name: admin
  - name: common


paths:

  /articles:
    post:
      summary: Create new article.
      tags:
        - admin
      parameters:
        - name: article
          in: body
          schema:
            properties:
              public:
                type: boolean
              title:
                type: string
              text_adoc:
                type: string
            required:
              - public
              - title
      responses:
        200:
          description: Article created.
          schema:
            properties:
              id:
                type: string
            required:
              - id


  /articles/{articleId}:
    parameters:
      - $ref: '#/parameters/ArticleId'

    get:
      summary: Get article by ID or alias.
      tags:
        - common
      responses:
        200:
          description: Article.
          schema:
            properties:
              id:
                type: string
              title:
                type: string
              created_at:
                type: string
                format: date-time
              last_modified:
                type: string
                format: date-time
              owner:
                $ref: '#/definitions/User'
              author:
                $ref: '#/definitions/User'
              text_html:
                type: string
              text_adoc:
                type: string
              public:
                description: Whether the article is visible to non-admins. Returned only to admins.
                type: boolean
              aliases:
                description: Returned only to admins.
                type: array
                items:
                  properties:
                    id:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    created_by:
                      type: string
                  required:
                    - id
                    - created_at
                    - created_by
            required:
              - id
              - title
              - created_at
              - last_modified
              - owner
              - author

    put:
      summary: Update article.
      tags:
        - admin
      parameters:
        - name: article
          in: body
          schema:
            properties:
              public:
                type: boolean
              title:
                type: string
              text_adoc:
                type: string
            required:
              - public
              - title
      responses:
        200:
          description: Article updated.


  /articles/{articleId}/aliases:
    parameters:
      - $ref: '#/parameters/ArticleId'

    post:
      summary: Create new article alias.
      tags:
        - admin
      parameters:
        - name: alias
          in: body
          schema:
            properties:
              alias:
                type: string
            required:
              - alias
      responses:
        200:
          description: Article alias created.


  /articles/{articleId}/aliases/{aliasId}:
    parameters:
      - $ref: '#/parameters/ArticleId'
      - $ref: '#/parameters/AliasId'

    delete:
      summary: Delete article alias.
      tags:
        - admin
      responses:
        200:
          description: Article alias deleted.


  /article-aliases:
    get:
      summary: Get all article aliases.
      tags:
        - admin
      responses:
        200:
          description: Aliases grouped by articles.
          schema:
            properties:
              articles:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    aliases:
                      type: array
                      items:
                        properties:
                          id:
                            type: string
                          created_at:
                            type: string
                            format: date-time
                          created_by:
                            type: string
                        required:
                          - id
                          - created_at
                          - created_by
                  required:
                    - id
                    - title
                    - aliases
            required:
              - articles


  /files:
    post:
      summary: Upload a new file.
      tags:
        - teacher
      parameters:
        - name: file
          in: body
          schema:
            properties:
              filename:
                type: string
              data:
                description: Base64-encoded bytes of the file.
                type: string
            required:
              - filename
              - data
      responses:
        200:
          description: File uploaded.
          schema:
            properties:
              id:
                type: string
            required:
              - id


  /files/metadata:
    get:
      summary: Get metadata for all stored files.
      tags:
        - admin
      responses:
        200:
          description: Metadata.
          schema:
            properties:
              files:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    article_id:
                      type: string
                    exercise_id:
                      type: string
                    filename:
                      type: string
                    type:
                      description: MIME type of the file.
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    created_by:
                      type: string
                  required:
                    - id
                    - filename
                    - type
                    - created_at
                    - created_by
            required:
              - files


  /resource/{fileId}:
    get:
      summary: Get stored file as a resource. Note that the MIME type is determined at upload time and can be arbitrary.
      tags:
        - common
      parameters:
        - $ref: '#/parameters/FileId'
      produces:
        - 'text/*'
        - 'image/*'
        - 'application/*'
      responses:
        200:
          description: File as a resource.
          schema:
            type: file


  /management/log:
    post:
      summary: Report new log.
      tags:
        - common
      parameters:
        - name: notification
          in: body
          schema:
            properties:
              client_id:
                type: string
              log_level:
                $ref: '#/definitions/LogLevel'
              log_message:
                type: string
            required:
              - client_id
              - log_level
              - log_message
      responses:
        200:
          description: Log reported.


  /account/checkin:
    post:
      summary: "Update account data in easy:core.
            Creates account if it does not exist. If the account does not exist,
            then this must be called before any other services. Returns system management notifications."
      tags:
        - common
      parameters:
        - name: account
          in: body
          schema:
            properties:
              first_name:
                type: string
              last_name:
                type: string
            required:
              - first_name
              - last_name
      responses:
        200:
          description: Returns system management notifications (messages).
          schema:
            properties:
              messages:
                type: array
                items:
                  properties:
                    message:
                      type: string


  /management/notifications:
    get:
      summary: Get all system management notifications.
      tags:
        - admin
      responses:
        200:
          description: System management notifications (messages).
          schema:
            properties:
              messages:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    message:
                      type: string
    post:
      summary: Create new system management notification.
      tags:
        - admin
      parameters:
        - name: notification
          in: body
          schema:
            properties:
              message:
                type: string
            required:
              - message
      responses:
        200:
          description: Notification created.


  /management/notifications/{notificationId}:
    parameters:
      - $ref: '#/parameters/NotificationId'
    patch:
      summary: Update corresponding system management notification if notification is present.
      tags:
        - admin
      parameters:
        - name: notification
          in: body
          schema:
            properties:
              message:
                type: string
      responses:
        200:
          description: Notification updated.
    delete:
      summary: Delete corresponding system management notification if notification is present.
      tags:
        - admin
      responses:
        200:
          description: Notification deleted


  /statistics/common:
    post:
      summary: "Returns number of submission that are currently being autoassessed, total number of submissions in all
       courses and total number of users. Expects client to upload current known values."
      tags:
        - common
      parameters:
        - name: statistics
          in: body
          schema:
            properties:
              in_auto_assessing:
                type: integer
              total_submissions:
                type: integer
              total_users:
                type: integer
      responses:
        200:
          description: Returns up-to-date statistics.
          schema:
            properties:
              in_auto_assessing:
                type: integer
              total_submissions:
                type: integer
              total_users:
                type: integer
            required:
              - in_auto_assessing
              - total_submissions
              - total_users


  /preview/adoc:
    post:
      summary: "Convert AsciiDoc content to HTML5"
      tags:
        - common
      parameters:
        - name: preview
          in: body
          schema:
            properties:
              content:
                type: string
            required:
              - content
      responses:
        200:
          description: Returns markdown converted to HTML5.
          schema:
            properties:
              content:
                type: string
            required:
              - content


  /student/courses:
    get:
      summary: Get summaries of courses the authenticated student has access to.
      tags:
        - student
      responses:
        200:
          description: Course summaries.
          schema:
            properties:
              courses:
                type: array
                items:
                  $ref: '#/definitions/StudentCourse'


  /courses/{courseId}/basic:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get basic info about this course.
      tags:
        - common
      responses:
        200:
          description: Course info.
          schema:
            properties:
              title:
                type: string
            required:
              - title


  /student/courses/{courseId}/exercises:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get summaries of exercises on this course.
      tags:
        - student
      responses:
        200:
          description: Exercise summaries.
          schema:
            properties:
              exercises:
                type: array
                items:
                  $ref: '#/definitions/StudentExercise'


  /student/courses/{courseId}/exercises/{courseExerciseId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get the specified course exercise details.
      tags:
        - student
      responses:
        200:
          description: Exercise details.
          schema:
            $ref: '#/definitions/StudentExerciseDetails'


  /student/courses/{courseId}/exercises/{courseExerciseId}/submissions/all:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      parameters:
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      summary: Get submissions to this course exercise.
      tags:
        - student
      responses:
        200:
          description: Submissions.
          schema:
            properties:
              submissions:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    solution:
                      type: string
                    submission_time:
                      type: string
                      format: date-time
                    autograde_status:
                      $ref: '#/definitions/AutogradeStatus'
                    grade_auto:
                      description: Exists if the submission has been automatically graded.
                      type: integer
                    feedback_auto:
                      description: Exists if the submission has been automatically graded.
                      type: string
                    grade_teacher:
                      description: Exists if the submission has been graded by a teacher.
                      type: integer
                    feedback_teacher:
                      description: Exists if the submission has been graded by a teacher.
                      type: string
                  required:
                    - id
                    - solution
                    - submission_time
                    - autograde_status
              count:
                type: integer
            required:
              - submissions
              - count


  /student/courses/{courseId}/exercises/{courseExerciseId}/draft:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get the latest submission's draft to the specified course exercise.
      tags:
        - student
      responses:
        200:
          description: Get the latest submission draft of this exercise.
          schema:
            $ref: '#/definitions/SubmissionDraft'
        204:
          description: No draft is available for the specified course exercise.
    post:
      summary: Upload new submission's draft to the specified course exercise.
      tags:
        - student
      parameters:
        - name: submission
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Submission draft uploaded.


  /student/courses/{courseId}/exercises/{courseExerciseId}/submissions/latest/await:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get and wait for the latest submission's details to the specified course exercise.
      tags:
        - student
      responses:
        200:
          description: Latest submission to this exercise.
          schema:
            properties:
              id:
                type: string
              solution:
                type: string
              submission_time:
                type: string
                format: date-time
              autograde_status:
                $ref: '#/definitions/AutogradeStatus'
              grade_auto:
                description: Exists if the submission has been automatically graded.
                type: integer
              feedback_auto:
                description: Exists if the submission has been automatically graded.
                type: string
              grade_teacher:
                description: Exists if the submission has been graded by a teacher.
                type: integer
              feedback_teacher:
                description: Exists if the submission has been graded by a teacher.
                type: string
            required:
              - id
              - solution
              - submission_time
              - autograde_status


  /student/courses/{courseId}/exercises/{courseExerciseId}/submissions:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    post:
      summary: Create a new submission to the specified course exercise.
      tags:
        - student
      parameters:
        - name: submission
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Submission created.


  /admin/courses:
    post:
      summary: Add new course.
      tags:
        - admin
      parameters:
        - name: course
          in: body
          schema:
            properties:
              title:
                type: string
            required:
              - title
      responses:
        200:
          description: Course added.
          schema:
            properties:
              id:
                type: string


  /courses/{courseId}/teachers:
    parameters:
      - $ref: '#/parameters/CourseId'

    post:
      summary: Add teacher accesses to course.
      tags:
        - admin
      parameters:
        - name: teachers
          in: body
          description: Teacher emails.
          schema:
            properties:
              teachers:
                type: array
                items:
                  properties:
                    email:
                      type: string
      responses:
        200:
          description: Teacher accesses added.

    delete:
      summary: Remove teachers' accesses from course.
      tags:
        - admin
      parameters:
        - name: teacher
          in: body
          description: Teacher ids.
          schema:
            properties:
              teachers:
                type: array
                items:
                  properties:
                    teacher_id:
                      type: string
      responses:
        200:
          description: Teachers' accesses removed.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/autoassess/draft:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get the latest teacher submission's draft to the specified course exercise.
      tags:
        - teacher
      responses:
        200:
          description: Get the latest teacher submission draft of this exercise.
          schema:
            $ref: '#/definitions/SubmissionDraft'
    post:
      summary: Upload new teacher submission's draft to the specified course exercise.
      tags:
        - teacher
      parameters:
        - name: submission
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Submission draft uploaded.


  /teacher/courses:
    get:
      summary: Get summaries of courses the authenticated teacher has access to.
      tags:
        - teacher
      responses:
        200:
          description: Course summaries.
          schema:
            properties:
              courses:
                type: array
                items:
                  $ref: '#/definitions/TeacherCourse'


  /teacher/courses/{courseId}/exercises:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get this course's exercises.
      tags:
        - teacher
      responses:
        200:
          description: Exercises.
          schema:
            properties:
              exercises:
                type: array
                items:
                  $ref: '#/definitions/TeacherCourseExercise'
    post:
      summary: Add exercise to this course.
      tags:
        - teacher
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              exercise_id:
                type: string
              threshold:
                type: integer
              soft_deadline:
                type: string
                format: date-time
              hard_deadline:
                type: string
                format: date-time
              student_visible:
                type: boolean
              assessments_student_visible:
                type: boolean
              instructions_adoc:
                type: string
              title_alias:
                type: string
            required:
              - exercise_id
              - threshold
              - student_visible
              - assessments_student_visible
      responses:
        200:
          description: Exercise added.


  /courses/teacher/{courseId}/grades:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get all the grades from all of the course students and from all of the course exercises.
      parameters:
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - in: query
          name: search
          type: string
          description: Search string that is matched on student names, username and email.
      tags:
        - teacher
      responses:
        200:
          description: Exercises, students and their grades.
          schema:
            properties:
              student_count:
                type: integer
              students:
                type: array
                items:
                  properties:
                    student_id:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string
                    email:
                      type: string
              exercises:
                type: array
                items:
                  properties:
                    exercise_id:
                      type: string
                    effective_title:
                      type: string
                    grade_threshold:
                      type: integer
                    student_visible:
                      type: boolean
                    grades:
                      type: array
                      items:
                        properties:
                          student_id:
                            type: string
                          grade:
                            type: integer
                          grader_type:
                            $ref: '#/definitions/GraderType'
                          feedback:
                            type: string


  /teacher/courses/{courseId}/exercises/{courseExerciseId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    get:
      summary: Get exercise details.
      tags:
        - teacher
      responses:
        200:
          description: Exercise details.
          schema:
            properties:
              title:
                type: string
              title_alias:
                type: string
              instructions_html:
                type: string
              instructions_adoc:
                type: string
              text_html:
                type: string
              text_adoc:
                type: string
              soft_deadline:
                type: string
                format: date-time
              hard_deadline:
                type: string
                format: date-time
              grader_type:
                $ref: '#/definitions/GraderType'
              threshold:
                type: integer
              last_modified:
                type: string
                format: date-time
              student_visible:
                type: boolean
              assessments_student_visible:
                type: boolean
              grading_script:
                type: string
                description: Exists iff grader_type == AUTO.
              container_image:
                type: string
                description: Exists iff grader_type == AUTO.
              max_time_sec:
                type: integer
                description: Exists iff grader_type == AUTO.
              max_mem_mb:
                type: integer
                description: Exists iff grader_type == AUTO.
              assets:
                type: array
                description: Exists iff grader_type == AUTO.
                items:
                  properties:
                    file_name:
                      type: string
                    file_content:
                      type: string
                  required:
                    - file_name
                    - file_content
              executors:
                type: array
                minItems: 1
                description: Exists iff grader_type == AUTO.
                items:
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                  required:
                    - id
                    - name
            required:
              - title
              - grader_type
              - threshold
              - last_modified
              - student_visible
              - assessments_student_visible


    delete:
      summary: Remove this exercise from this course.
      tags:
        - teacher
      responses:
        200:
          description: Removed.


  /courses/{courseId}/exercises/{courseExerciseId}/reorder:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    post:
      summary: Shift exercises on the course such that this exercise will be on the given position.
      tags:
        - teacher
      parameters:
        - name: index
          in: body
          schema:
            properties:
              new_index:
                type: integer
            required:
              - new_index
      responses:
        200:
          description: Reordered.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/autoassess:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    post:
      summary: Test autoassessment of this exercise with this solution.
      tags:
        - teacher
      parameters:
        - name: solution
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Assessment completed.
          schema:
            properties:
              grade:
                type: integer
              feedback:
                type: string


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/latest/students:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get latest submission summaries for this exercise of all students in this course.
      parameters:
        - in: query
          name: search
          type: string
          description: Search string that is matched on student names and username.
        - in: query
          name: orderby
          type: string
          description: "Used for ordering results.
          Possible choices are: family name (order lexicographically by the student's family name),
          submission time (ASC: no submission - earliest - latest; DESC: latest - earliest - no submission),
          valid grade (ASC: missing - low - high; DESC: high - low - missing),
          whether the submission is graded automatically or by a teacher (ASC: auto - teacher - no grade; DESC: teacher - auto - no grade)."
          enum:
            - name
            - time
            - grade
            - gradedby
          default: name
        - in: query
          name: order
          type: string
          description: "Whether to order the results in ascending or descending order."
          enum:
            - asc
            - desc
          default: asc
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      tags:
        - teacher
      responses:
        200:
          description: Latest submission summaries.
          schema:
            properties:
              student_count:
                type: integer
                description: number of total results
              students:
                type: array
                items:
                  properties:
                    student_id:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string
                    submission_time:
                      type: string
                      format: date-time
                      description: Exists if the student has a submission.
                    grade:
                      type: integer
                      description: Exists if the student has an assessment on the latest submission (together with graded_by).
                    graded_by:
                      $ref: '#/definitions/GraderType'
                  required:
                    - student_id
                    - given_name
                    - family_name
            required:
              - student_count
              - students


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/{submissionId}/assessments:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
      - $ref: '#/parameters/SubmissionId'
    post:
      summary: Create a new assessment for this submission.
      tags:
        - teacher
      parameters:
        - name: assessment
          in: body
          schema:
            properties:
              grade:
                type: integer
              feedback:
                type: string
            required:
              - grade
      responses:
        200:
          description: Created.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/all/students/{studentId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
      - $ref: '#/parameters/StudentId'
    get:
      parameters:
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
      summary: Get this student's all submissions for this exercise.
      tags:
        - teacher
      responses:
        200:
          description: Submissions.
          schema:
            properties:
              submissions:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    solution:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    grade_auto:
                      description: Exists if the submission has been automatically graded.
                      type: integer
                    feedback_auto:
                      description: Exists if the submission has been automatically graded.
                      type: string
                    grade_teacher:
                      description: Exists if the submission has been graded by a teacher.
                      type: integer
                    feedback_teacher:
                      description: Exists if the submission has been graded by a teacher.
                      type: string
                  required:
                    - id
                    - solution
                    - created_at
              count:
                type: integer
            required:
              - submissions
              - count


  /courses/{courseId}/participants:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get all participants (including pending access) who are registered to this course.
      parameters:
        - in: query
          name: role
          type: string
          description: "Optional. This query parameter defines if the service should return all participants, only
          teachers or only students. If left empty, all are returned."
          enum: [teacher, student, all]
      tags:
        - teacher
      responses:
        200:
          description: Participants in this course.
          schema:
            properties:
              moodle_short_name:
                type: string
              students:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string
                    groups:
                      type: array
                      items:
                        $ref: '#/definitions/Group'
                    moodle_username:
                      type: string
                  required:
                    - id
                    - email
                    - given_name
                    - family_name
                    - groups
              teachers:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string
                    groups:
                      type: array
                      items:
                        $ref: '#/definitions/Group'
                  required:
                    - id
                    - email
                    - given_name
                    - family_name
                    - groups
              students_pending:
                type: array
                items:
                  properties:
                    email:
                      type: string
                    valid_from:
                      type: string
                      format: date-time
                    groups:
                      type: array
                      items:
                        $ref: '#/definitions/Group'
                  required:
                    - email
                    - valid_from
                    - groups
              students_moodle_pending:
                type: array
                items:
                  properties:
                    ut_username:
                      type: string
                    groups:
                      type: array
                      items:
                        $ref: '#/definitions/Group'
                  required:
                    - ut_username
                    - groups


  /courses/{courseId}/students:
    parameters:
      - $ref: '#/parameters/CourseId'
    post:
      summary: Add the given students to this course
      tags:
        - teacher
      parameters:
        - name: students
          in: body
          schema:
            description: Student emails.
            properties:
              students:
                type: array
                items:
                  properties:
                    email:
                      type: string
                    groups:
                      type: array
                      items:
                        properties:
                          id:
                            type: string
                        required:
                          - id
                  required:
                    - email
      responses:
        200:
          description: Students added.
          schema:
            properties:
              accesses_added:
                type: integer
                description: Number of students with access added.
              pending_accesses_added_updated:
                type: integer
                description: Number of students added (or updated) with pending access.


  /courses/{courseId}/moodle:
    parameters:
      - $ref: '#/parameters/CourseId'
    post:
      summary: One-way link Moodle course students (add access, add pending access and remove student access)
      tags:
        - admin
      parameters:
        - name: Moodle course info
          in: body
          schema:
            properties:
              moodle_short_name:
                type: string
      responses:
        200:
          description: Number of student access added, pending and removed.
          schema:
            properties:
              students_synced:
                type: integer
              pending_students_synced:
                type: integer


  /courses/{courseId}/moodlesync/grades:
    parameters:
      - $ref: '#/parameters/CourseId'
    post:
      summary: One-way sync course grades with Moodle
      tags:
        - teacher
      responses:
        200:
          description: Grades were successfully synced


  /teacher/courses/{courseId}/students/{studentId}:
    delete:
      summary: Remove this student from this course.
      tags:
        - teacher
      parameters:
        - $ref: '#/parameters/CourseId'
        - $ref: '#/parameters/StudentId'
      responses:
        200:
          description: Student removed.


  /exercises:
    post:
      summary: Create a new exercise.
      tags:
        - teacher
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              title:
                type: string
              text_html:
                type: string
              text_adoc:
                type: string
              public:
                type: boolean
              grader_type:
                $ref: '#/definitions/GraderType'
              grading_script:
                type: string
                description: Required if grader_type == AUTO, else ignored.
              container_image:
                type: string
                description: Required if grader_type == AUTO, else ignored.
              max_time_sec:
                type: integer
                description: Required if grader_type == AUTO, else ignored.
              max_mem_mb:
                type: integer
                description: Required if grader_type == AUTO, else ignored.
              assets:
                type: array
                description: Required if grader_type == AUTO, else ignored.
                items:
                  properties:
                    file_name:
                      type: string
                    file_content:
                      type: string
                  required:
                    - file_name
                    - file_content
              executors:
                type: array
                minItems: 1
                description: Required if grader_type == AUTO, else ignored.
                items:
                  properties:
                    executor_id:
                      type: string
                  required:
                    - executor_id
            required:
              - title
              - public
              - grader_type
      responses:
        200:
          description: Exercise created.
          schema:
            properties:
              id:
                type: string


  /exercises/{exerciseId}:
    parameters:
      - $ref: '#/parameters/ExerciseId'
    put:
      summary: Modify exercise.
      tags:
        - admin
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              title:
                type: string
              text_html:
                type: string
              text_adoc:
                type: string
              public:
                type: boolean
              grader_type:
                $ref: '#/definitions/GraderType'
              grading_script:
                type: string
                description: Required if grader_type == AUTO, else ignored.
              container_image:
                type: string
                description: Required if grader_type == AUTO, else ignored.
              max_time_sec:
                type: integer
                description: Required if grader_type == AUTO, else ignored.
              max_mem_mb:
                type: integer
                description: Required if grader_type == AUTO, else ignored.
              assets:
                type: array
                description: Required if grader_type == AUTO, else ignored.
                items:
                  properties:
                    file_name:
                      type: string
                    file_content:
                      type: string
                  required:
                    - file_name
                    - file_content
              executors:
                type: array
                minItems: 1
                description: Required if grader_type == AUTO, else ignored.
                items:
                  properties:
                    executor_id:
                      type: string
                  required:
                    - executor_id
            required:
              - title
              - public
              - grader_type
      responses:
        200:
          description: Modified.


  /executors:
    get:
      summary: Get all executors.
      tags:
        - teacher
      responses:
        200:
          description: Executors.
          schema:
            type: array
            items:
              properties:
                id:
                  type: string
                name:
                  type: string
                base_url:
                  type: string
                load:
                  type: integer
                max_load:
                  type: integer

    post:
      summary: Create new executor.
      tags:
        - admin
      parameters:
        - name: executor
          in: body
          required: true
          schema:
            properties:
              name:
                type: string
              base_url:
                type: string
              max_load:
                type: integer
            required:
              - name
              - base_url
              - max_load
      responses:
        200:
          description: Created.
          schema:
            properties:
              id:
                type: string


  /executors/{executorId}:
    parameters:
      - $ref: '#/parameters/ExecutorId'
    delete:
      summary: Delete executor.
      tags:
        - admin
      responses:
        200:
          description: Deleted.
    put:
      parameters:
        - $ref: '#/parameters/ExecutorId'
        - name: executor
          in: body
          required: true
          schema:
            properties:
              name:
                type: string
              base_url:
                type: string
              max_load:
                type: integer
            required:
              - name
              - base_url
              - max_load
      summary: Update executor.
      tags:
        - admin
      responses:
        200:
          description: Updated.



parameters:

  CourseId:
    name: courseId
    in: path
    required: true
    type: string

  CourseExerciseId:
    name: courseExerciseId
    in: path
    required: true
    type: string

  StudentId:
    name: studentId
    in: path
    required: true
    type: string

  ExerciseId:
    name: exerciseId
    in: path
    required: true
    type: string

  SubmissionId:
    name: submissionId
    in: path
    required: true
    type: string

  ExecutorId:
    name: executorId
    in: path
    required: true
    type: string

  NotificationId:
    name: notificationId
    in: path
    required: true
    type: string

  ArticleId:
    name: articleId
    in: path
    required: true
    type: string

  AliasId:
    name: aliasId
    in: path
    required: true
    type: string

  FileId:
    name: fileId
    in: path
    required: true
    type: string

  Offset:
    name: offset
    in: query
    type: integer
    description: The number of results to skip from the beginning.

  Limit:
    name: limit
    in: query
    type: integer
    description: The numbers of results to return.


definitions:

  User:
    properties:
      id:
        type: string
      given_name:
        type: string
      family_name:
        type: string
    required:
      - id
      - given_name
      - family_name

  Group:
    properties:
      id:
        type: string
      name:
        type: string
    required:
      - id
      - name

  StudentCourse:
    properties:
      id:
        type: string
      title:
        type: string

  StudentExercise:
    properties:
      id:
        type: string
      effective_title:
        type: string
      deadline:
        type: string
        format: date-time
        description: Optional.
      status:
        $ref: '#/definitions/ExerciseStatus'
      grade:
        type: integer
        description: Optional (together with graded_by).
      graded_by:
        $ref: '#/definitions/GraderType'
      ordering_idx:
        type: integer

  StudentExerciseDetails:
    properties:
      effective_title:
        type: string
      text_html:
        type: string
      deadline:
        type: string
        format: date-time
      grader_type:
        $ref: '#/definitions/GraderType'
      threshold:
        type: integer
      instructions_html:
        type: string
    required:
      - effective_title
      - grader_type
      - threshold

  SubmissionDraft:
    properties:
      solution:
        type: string
      created_at:
        type: string
        format: date-time
    required:
      - solution
      - created_at

  TeacherCourse:
    properties:
      id:
        type: string
      title:
        type: string
      student_count:
        type: integer

  TeacherCourseExercise:
    properties:
      id:
        type: string
      effective_title:
        type: string
      soft_deadline:
        type: string
        format: date-time
      grader_type:
        $ref: '#/definitions/GraderType'
      ordering_idx:
        type: integer
      unstarted_count:
        type: integer
      ungraded_count:
        type: integer
      started_count:
        type: integer
      completed_count:
        type: integer



  # Enums
  ExerciseStatus:
    type: string
    description: "Student-specific status of a course exercise.
    The student either has not made any submissions to it (UNSTARTED),
    has made submissions but the last submission did not meet the threshold (STARTED)
    or the last submission did meet the threshold (COMPLETED)."
    enum:
      - UNSTARTED
      - STARTED
      - COMPLETED

  GraderType:
    type: string
    description: "Type of grading used for an exercise.
    The exercise is either graded automatically (AUTO) or
    manually by a teacher (TEACHER).
    Note that automatically graded exercises can have teacher assessments as well."
    enum:
      - AUTO
      - TEACHER

  AutogradeStatus:
    type: string
    description: "Status of automatic assessment on a submission.
    The submission is either not graded automatically (NONE),
    the automatic grading is in progress (IN_PROGRESS),
    completed (COMPLETED) or has failed (FAILED)."
    enum:
      - NONE
      - IN_PROGRESS
      - COMPLETED
      - FAILED

  LogLevel:
    type: string
    description: "Urgency level of the log that is reported to the server."
    enum:
      - DEBUG
      - INFO
      - WARN
      - ERROR
