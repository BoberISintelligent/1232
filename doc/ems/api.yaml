swagger: "2.0"
info:
  description: "This specification documents the public API of easy:ems. Services with the 'student' tag
  require a token containing claim 'easy_role: student' and 'teacher' services analogously require 'easy_role: teacher'.
  'Common' services can be called by either role."
  version: "2.0"
  title: Easy:ems Public API
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
basePath: /v2

tags:
  - name: student
  - name: teacher
  - name: common
  - name: admin


paths:

  /account/personal:
    post:
      summary: Update account data with :ems. Creates account if it does not exist. If the account does not exist, this must be called before any other services.
      tags:
        - common
      parameters:
        - name: account
          in: body
          schema:
            properties:
              email:
                type: string
              first_name:
                type: string
              last_name:
                type: string
            required:
              - email
              - first_name
              - last_name
      responses:
        200:
          description: Updated.


  /student/courses:
    get:
      summary: Get summaries of courses the authenticated student has access to.
      tags:
        - student
      responses:
        200:
          description: Course summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/StudentCourse'


  /courses/{courseId}/basic:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get basic info about this course.
      tags:
        - common
      responses:
        200:
          description: Course info.
          schema:
            properties:
              title:
                type: string
            required:
              - title


  /student/courses/{courseId}/exercises:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get summaries of exercises in the specified course (that are visible to students).
      tags:
        - student
      responses:
        200:
          description: Exercise summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/StudentExercise'


  /student/courses/{courseId}/exercises/{courseExerciseId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get the specified course exercise details.
      tags:
        - student
      responses:
        200:
          description: Exercise details.
          schema:
            $ref: '#/definitions/StudentExerciseDetails'


  /student/courses/{courseId}/exercises/{courseExerciseId}/submissions/latest:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get the latest submission's details to the specified course exercise.
      tags:
        - student
      responses:
        200:
          description: Latest submission to this exercise.
          schema:
            $ref: '#/definitions/Submission'


  /student/courses/{courseId}/exercises/{courseExerciseId}/submissions:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    get:
      summary: Get all submissions to the specified course exercise.
      tags:
        - student
      responses:
        200:
          description: All submissions to this exercise.
          schema:
            type: array
            items:
              $ref: '#/definitions/Submission'

    post:
      summary: Create a new submission to the specified course exercise.
      tags:
        - student
      parameters:
        - name: submission
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Submission created.

  /admin/courses:
    post:
      summary: Add new course.
      tags:
        - admin
      parameters:
        - name: course
          in: body
          schema:
            properties:
              title:
                type: string
            required:
              - title
      responses:
        200:
          description: Course added.
          schema:
            properties:
              id:
                type: string

  /courses/{courseId}/teachers:
    post:
      summary: Add teacher access to course.
      tags:
        - admin
      parameters:
        - $ref: '#/parameters/CourseId'
        - name: teacher
          in: body
          description: Teacher ids.
          schema:
            type: array
            items:
              properties:
                teacher_id:
                  type: string
      responses:
        200:
          description: Teachers added.
    delete:
      summary: Remove teacher acces from course.
      tags:
        - admin
      parameters:
        - $ref: '#/parameters/CourseId'
        - name: teacher
          in: body
          description: Teacher ids.
          schema:
            type: array
            items:
              properties:
                teacher_id:
                  type: string
      responses:
        200:
          description: Teachers access removed.

  /teacher/courses:
    get:
      summary: Get summaries of courses the authenticated teacher has access to.
      tags:
        - teacher
      responses:
        200:
          description: Course summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherCourse'



  /teacher/courses/{courseId}/exercises:
    parameters:
      - $ref: '#/parameters/CourseId'

    get:
      summary: Get this course's exercises.
      tags:
        - teacher
      responses:
        200:
          description: Exercises.
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherCourseExercise'


    post:
      summary: Add exercise to this course.
      tags:
        - teacher
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              exercise_id:
                type: string
              threshold:
                type: integer
              soft_deadline:
                type: string
                format: date-time
              hard_deadline:
                type: string
                format: date-time
              student_visible:
                type: boolean
              assessments_student_visible:
                type: boolean
              instructions_html:
                type: string
              title_alias:
                type: string
            required:
              - exercise_id
              - threshold
              - student_visible
              - assessments_student_visible
      responses:
        200:
          description: Exercise added.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    get:
      summary: Get exercise details.
      tags:
        - teacher
      responses:
        200:
          description: Exercise details.
          schema:
            $ref: '#/definitions/TeacherCourseExerciseDetails'

    delete:
      summary: Remove this exercise from this course.
      tags:
        - teacher
      responses:
        200:
          description: Removed.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/autoassess:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'

    post:
      summary: Test autoassessment of this exercise with this solution.
      tags:
        - teacher
      parameters:
        - name: solution
          in: body
          schema:
            properties:
              solution:
                type: string
      responses:
        200:
          description: Assessment completed.
          schema:
            properties:
              grade:
                type: integer
              feedback:
                type: string


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/latest/students:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
    get:
      summary: Get latest submission summaries for this exercise of all students in this course.
      tags:
        - teacher
      responses:
        200:
          description: Latest submission summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherSubmissionSummary'


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/latest/students/{studentId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
      - $ref: '#/parameters/StudentId'
    get:
      summary: Get this student's latest submission for this exercise.
      tags:
        - teacher
      responses:
        300:
          description: Submission.
          schema:
            $ref: '#/definitions/TeacherSubmission'


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/{submissionId}/assessments:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
      - $ref: '#/parameters/SubmissionId'
    post:
      summary: Create a new assessment for this submission.
      tags:
        - teacher
      parameters:
        - name: assessment
          in: body
          schema:
            properties:
              grade:
                type: integer
              feedback:
                type: string
            required:
              - grade
      responses:
        200:
          description: Created.


  /teacher/courses/{courseId}/exercises/{courseExerciseId}/submissions/all/students/{studentId}:
    parameters:
      - $ref: '#/parameters/CourseId'
      - $ref: '#/parameters/CourseExerciseId'
      - $ref: '#/parameters/StudentId'
    get:
      summary: Get this student's all submissions for this exercise.
      tags:
        - teacher
      responses:
        300:
          description: Submissions.
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherSubmission'


  /courses/{courseId}/participants:
    parameters:
      - $ref: '#/parameters/CourseId'
    get:
      summary: Get all participants who are registered to this course.
      parameters:
        - in: query
          name: role
          type: string
          description: "Optional. This query parameter defines if the service should return all participants, only
          teachers or only students. If left empty, all are returned."
          enum: [teacher, student, all]
      tags:
        - common
      responses:
        200:
          description: Participants in this course.
          schema:
            properties:
              students:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string
              teachers:
                type: array
                items:
                  properties:
                    id:
                      type: string
                    email:
                      type: string
                    given_name:
                      type: string
                    family_name:
                      type: string

    post:
      summary: Add the given students to this course
      tags:
        - teacher
      parameters:
        - name: students
          in: body
          schema:
            description: Student ids.
            type: array
            items:
              type: string
      responses:
        200:
          description: Students added.


  /teacher/courses/{courseId}/students/{studentId}:
    delete:
      summary: Remove this student from this course.
      tags:
        - teacher
      parameters:
        - $ref: '#/parameters/CourseId'
        - $ref: '#/parameters/StudentId'
      responses:
        200:
          description: Student removed.


  /teacher/exercises:
    get:
      summary: Get all summaries of exercises (that the authenticated teacher has access to).
      tags:
        - teacher
      responses:
        200:
          description: Exercise summaries.
          schema:
            type: array
            items:
              $ref: '#/definitions/TeacherExercise'

    post:
      summary: Create a new exercise.
      tags:
        - teacher
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              title:
                type: string
              text_html:
                type: string
              public:
                type: boolean
              grader_type:
                $ref: '#/definitions/GraderType'
              aas_id:
                type: string
            required:
              - title
              - text_html
              - public
              - grader_type
      responses:
        200:
          description: Exercise created.
          schema:
            properties:
              id:
                type: string


  /teacher/exercises/{exerciseId}:
    parameters:
      - $ref: '#/parameters/ExerciseId'

    # TODO: not implemented
    get:
      summary: Get exercise details.
      tags:
        - teacher
      responses:
        200:
          description: Exercise details.
          schema:
            $ref: '#/definitions/TeacherExerciseDetails'

    put:
      summary: Modify exercise.
      tags:
        - teacher
      parameters:
        - name: exercise
          in: body
          schema:
            properties:
              title:
                type: string
              text_html:
                type: string
              public:
                type: boolean
      responses:
        200:
          description: Modified.


parameters:

  CourseId:
    name: courseId
    in: path
    required: true
    type: string

  CourseExerciseId:
    name: courseExerciseId
    in: path
    required: true
    type: string

  StudentId:
    name: studentId
    in: path
    required: true
    type: string

  ExerciseId:
    name: exerciseId
    in: path
    required: true
    type: string

  SubmissionId:
    name: submissionId
    in: path
    required: true
    type: string


definitions:

  StudentCourse:
    properties:
      id:
        type: string
      title:
        type: string

  StudentExercise:
    properties:
      id:
        type: string
      effective_title:
        type: string
      deadline:
        type: string
        format: date-time
        description: Optional.
      status:
        $ref: '#/definitions/ExerciseStatus'
      grade:
        type: integer
        description: Optional (together with graded_by).
      graded_by:
        $ref: '#/definitions/GraderType'
      ordering_idx:
        type: integer

  StudentExerciseDetails:
    properties:
      effective_title:
        type: string
      text_html:
        type: string
        description: Optional.
      deadline:
        type: string
        format: date-time
        description: Optional.
      grader_type:
        $ref: '#/definitions/GraderType'
      threshold:
        type: integer
      instructions_html:
        type: string

  Submission:
    properties:
      # TODO: serial needed for what?
      #      serial:
      #        type: integer
      solution:
        type: string
      submission_time:
        type: string
        format: date-time
      autograde_status:
        $ref: '#/definitions/AutogradeStatus'
      grade_auto:
        description: Optional, exists if the submission has been automatically graded.
        type: integer
      feedback_auto:
        description: Optional, exists if the submission has been automatically graded.
        type: string
      grade_teacher:
        description: Optional, exists if the submission has been graded by a teacher.
        type: integer
      feedback_teacher:
        description: Optional, exists if the submission has been graded by a teacher.
        type: string

  TeacherCourse:
    properties:
      id:
        type: string
      title:
        type: string
      student_count:
        type: integer

  TeacherCourseExercise:
    properties:
      id:
        type: string
      effective_title:
        type: string
      soft_deadline:
        type: string
        format: date-time
      grader_type:
        $ref: '#/definitions/GraderType'
      ordering_idx:
        type: integer
      unstarted_count:
        type: integer
      ungraded_count:
        type: integer
      started_count:
        type: integer
      completed_count:
        type: integer

  TeacherCourseExerciseDetails:
    properties:
      title:
        type: string
      text_html:
        type: string
      soft_deadline:
        type: string
        format: date-time
      hard_deadline:
        type: string
        format: date-time
      grader_type:
        $ref: '#/definitions/GraderType'
      threshold:
        type: integer
      last_modified:
        type: string
        format: date-time
      student_visible:
        type: boolean
      assessments_student_visible:
        type: boolean
      instructions_html:
        type: string
      title_alias:
        type: string

  TeacherSubmissionSummary:
    properties:
      student_id:
        type: string
      given_name:
        type: string
      family_name:
        type: string
      submission_time:
        type: string
        format: date-time
      grade:
        description: Optional, exists if the submission has been graded (together with graded_by).
        type: integer
      graded_by:
        $ref: '#/definitions/GraderType'

  TeacherSubmission:
    properties:
      id:
        type: string
      solution:
        type: string
      created_at:
        type: string
        format: date-time
      grade_auto:
        description: Optional, exists if the submission has been automatically graded.
        type: integer
      feedback_auto:
        description: Optional, exists if the submission has been automatically graded.
        type: string
      grade_teacher:
        description: Optional, exists if the submission has been graded by a teacher.
        type: integer
      feedback_teacher:
        description: Optional, exists if the submission has been graded by a teacher.
        type: string

  Student:
    properties:
      id:
        type: string
      given_name:
        type: string
      family_name:
        type: string

  StudentName:
    properties:
      given_name:
        type: string
      family_name:
        type: string

  TeacherExercise:
    properties:
      id:
        type: string
      title:
        type: string
      grader_type:
        $ref: '#/definitions/GraderType'
      owner:
        description: TODO
        type: string

  TeacherExerciseDetails:
    properties:
      title:
        type: string
      grader_type:
        $ref: '#/definitions/GraderType'
      owner:
        description: Id of teacher who owns this exercise.
        type: string
      text_html:
        type: string
      public:
        type: boolean
      courses:
        type: array
        items:
          properties:
            id:
              type: string
            title:
              type: string
      created_at:
        type: string
        format: date-time
      last_modified:
        type: string
        format: date-time


  # Enums
  ExerciseStatus:
    type: string
    description: Student-specific status of a course exercise. The student either has not made any submissions to it (UNSTARTED), has made submissions but the last submission did not meet the threshold (STARTED) or the last submission did meet the threshold (COMPLETED).
    enum:
      - UNSTARTED
      - STARTED
      - COMPLETED

  GraderType:
    type: string
    description: Type of grading used for an exercise. The exercise is either graded automatically (AUTO) or manually by a teacher (TEACHER). Note that automatically graded exercises can have teacher assessments as well.
    enum:
      - AUTO
      - TEACHER

  AutogradeStatus:
    type: string
    description: "Status of automatic assessment on a submission. The submission is either not graded automatically (NONE),
    the automatic grading is in progress (IN_PROGRESS), completed (COMPLETED) or has failed (FAILED)."
    enum:
      - NONE
      - IN_PROGRESS
      - COMPLETED
      - FAILED
